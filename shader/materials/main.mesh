#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

#extension GL_EXT_mesh_shader : require

#include "../scalar_ops.glsl"

#define MESH
#include "materials_common.glsl"
#include "vertex_process.glsl"

layout(local_size_x = WORKGROUP_SIZE) in;
layout(triangles, max_vertices = MaxVert, max_primitives = MaxPrim) out;

out gl_MeshPerVertexEXT {
  vec4 gl_Position;
  } gl_MeshVerticesEXT[];

#if defined(MAT_VARYINGS)
layout(location = 0) out Varyings shOut[];  // [max_vertices]
#endif

#if DEBUG_DRAW
layout(location = DEBUG_DRAW_LOC) out flat uint debugId[];
#endif

bool sphereTest(const uint objId, const uint meshletId) {
  const uint laneID = gl_LocalInvocationID.x;
#if (MESH_TYPE==T_LANDSCAPE)
  const vec4 sphere = bounds[meshletId];
#elif (MESH_TYPE==T_PFX)
  const vec4 sphere = vec4(0);
#else
  const vec4 sphere = vec4(matrix[objId][3].xyz,bucket.bboxRadius);
#endif
  bool invisible = (sphere.w<0.f);
  if(laneID<6 && dot(vec4(sphere.xyz,1.0), scene.frustrum[laneID]) <= -sphere.w) {
    invisible = true;
    }
  invisible = workgroupAny(invisible);
  return !invisible;
  }

#if !defined(SHADOW_MAP) && (MESH_TYPE!=T_PFX)
shared vec3 bboxProj[8];
bool bboxTest(const uint objId) {
  const uint laneID = gl_LocalInvocationID.x;

  if(!sphereTest(objId,objId))
    return false;

  if(laneID<8) {
#if defined(LVL_OBJECT)
    const vec3  b[2]   = {bucket.bbox[0].xyz, bucket.bbox[1].xyz};
#else
    const vec3  objPos = bounds[objId].xyz;
    const float R      = bounds[objId].w;
    const vec3  b[2]   = { objPos-vec3(R), objPos+vec3(R) };
#endif
    const vec3  pos    = vec3(b[bitfieldExtract(laneID,0,1)].x,
                              b[bitfieldExtract(laneID,1,1)].y,
                              b[bitfieldExtract(laneID,2,1)].z);

    vec4 trPos = vec4(pos,1.0);
#if defined(LVL_OBJECT)
    trPos = matrix[objId]    *trPos;
#endif
    trPos = scene.viewProject*trPos;

    vec3 bp = trPos.xyz/max(trPos.w,0.001);
    bp.xy = bp.xy*0.5 + vec2(0.5);
    bp.xy = clamp(bp.xy, vec2(0.0), vec2(1.0));
    bboxProj[laneID] = bp;
    }

  memoryBarrierShared();
  barrier();

  vec3 bbox[2] = {bboxProj[0], bboxProj[0]};
  for(int i=1; i<8; ++i) {
    bbox[0] = min(bbox[0],bboxProj[i]);
    bbox[1] = max(bbox[1],bboxProj[i]);
    }

  int   mip     = 0;
  ivec2 ibbox[2];
  ivec2 hiZsize = textureSize(hiZ,mip);
  ibbox[0] = ivec2(    (bbox[0].xy*hiZsize));
  ibbox[1] = ivec2(ceil(bbox[1].xy*hiZsize));
  ivec2 sz = ibbox[1]-ibbox[0];

  bool visible = false;

  const uint maxHiZSamples = 16;
  if(laneID<maxHiZSamples) {
    [[dont_unroll]]
    while(sz.x*sz.y>maxHiZSamples) {
      ibbox[0] = ibbox[0]/2;
      ibbox[1] = (ibbox[1]+ivec2(1))/2;
      sz       = ibbox[1]-ibbox[0];
      mip++;
      }

    if(0<sz.x) {
      ivec2 offset  = ivec2(laneID%sz.x,laneID/sz.x);
      ivec2 at      = ibbox[0]+offset;
      if(offset.y<sz.y) {
        float bz = bbox[0].z;
        bz = (1.0-bz)*20.0;
        float z  = texelFetch(hiZ, at, mip).x;
        if(bz >= z)
          visible = true;
        }
      }
    }

  visible = workgroupAny(visible);
  return visible;
  }
#endif

uvec2  processMeshlet(const uint meshletId) {
  uint vertCount = MaxVert;
  uint primCount = MaxPrim;

  const uint iboOffset = meshletId * MaxInd + MaxInd - 3;
  const uint index0    = meshletId * MaxVert; // TODO: uint8 ibo
  uvec3 ret;
  ret.x = indexes[iboOffset + 0];
  ret.y = indexes[iboOffset + 1];
  ret.z = indexes[iboOffset + 2];
  if(ret.x==ret.y) {
    // last dummy triangle encodes primitive count
    primCount = ret.x - index0;
    //vertCount = ret.z; // TODO
    }
  return uvec2(vertCount, primCount);
  }

uvec3 processPrimitive(const uint meshletId, const uint outId) {
  const uint  iboOffset = meshletId * MaxInd  + outId*3;
  const uint  index0    = meshletId * MaxVert; // TODO: uint8 ibo
  const uvec3 prim      = processPrimitive(iboOffset) - uvec3(index0);
  return prim;
  }

vec4  processVertex(out Varyings var, const uint objId, const uint meshletId, const uint outId) {
  const uint vboOffset = meshletId * MaxVert + outId;
  const uint iboOffset = meshletId * MaxInd  + outId*3;
  const uint index0    = meshletId * MaxVert; // TODO: uint8 ibo

  vec4 position = processVertex(var, objId, vboOffset);
  // position.y = -position.y;
  return position;
  }

void main() {
#if defined(LVL_OBJECT)
  const uint objId     = gl_WorkGroupID.y + push.firstInstance;
  const uint meshletId = gl_WorkGroupID.x + push.meshletBase;
#elif (MESH_TYPE==T_LANDSCAPE)
  const uint objId     = 0;
  const uint meshletId = gl_WorkGroupID.x + push.meshletBase;
#else
  const uint objId     = 0;
  const uint meshletId = gl_WorkGroupID.x;
#endif

#if defined(SHADOW_MAP)
#  if (MESH_TYPE==T_LANDSCAPE)
  const bool visible = sphereTest(objId,meshletId);
#  elif (MESH_TYPE==T_PFX)
  const bool visible = true;
#  else
  const bool visible = sphereTest(objId,meshletId);
#  endif
#else
#  if (MESH_TYPE==T_LANDSCAPE)
  const bool visible = bboxTest(meshletId);
#  elif (MESH_TYPE==T_PFX)
  const bool visible = true;
#  else
  const bool visible = bboxTest(objId);
#  endif
#endif

  if(!visible) {
    // NOTE: produces compiller error on DX
    // SetMeshOutputsEXT(0, 0);
    // return;
    }

  const uvec2 mesh      = visible ? processMeshlet(meshletId) : uvec2(0);
  const uint  vertCount = mesh.x;
  const uint  primCount = mesh.y;

  // Alloc outputs
  SetMeshOutputsEXT(vertCount, primCount);
  if(!visible)
    return;

  Varyings var;
  const uint laneID = gl_LocalInvocationIndex;

  // AMD: prefersLocalInvocationVertexOutput / prefersLocalInvocationPrimitiveOutput
  if(laneID<primCount)
    gl_PrimitiveTriangleIndicesEXT[laneID] = processPrimitive(meshletId, laneID);
  if(laneID<vertCount)
    gl_MeshVerticesEXT[laneID].gl_Position = processVertex(var, objId, meshletId, laneID);
#if defined(MAT_VARYINGS)
  if(laneID<vertCount)
    shOut[laneID]                          = var;
#endif

#if WORKGROUP_SIZE<64
  {
    const uint id = laneID+32;
    if(id<primCount)
      gl_PrimitiveTriangleIndicesEXT[id] = processPrimitive(meshletId, id);
    if(id<vertCount)
      gl_MeshVerticesEXT[id].gl_Position = processVertex(var, objId, meshletId, id);
#if defined(MAT_VARYINGS)
    if(laneID<vertCount)
      shOut[id]                          = var;
#endif
  }
#endif

#if (DEBUG_DRAW) && !defined(LVL_OBJECT)
  for(int i=laneID; i<MaxVert; i+=gl_WorkGroupSize.x) {
    debugId[i] = meshletId;
    }
#endif

#if 0 && defined(LVL_OBJECT) && !defined(DEPTH_ONLY) && (MESH_TYPE==T_SKINING)
  // DEBUG CODE
  memoryBarrierShared();
  barrier();
  if(laneID==0) {
    const ivec3 v[8] = {
      {0,0,0},{1,0,0},{1,1,0},{0,1,0},
      {0,0,1},{1,0,1},{1,1,1},{0,1,1},
      };
    const int ibo[] = {
      0, 1, 3, 3, 1, 2,
      1, 5, 2, 2, 5, 6,
      5, 4, 6, 6, 4, 7,
      4, 0, 7, 7, 0, 3,
      3, 2, 7, 7, 2, 6,
      4, 5, 0, 0, 5, 1
      };
    const vec3 b[2] = {material.bbox[0].xyz, material.bbox[1].xyz};

    for(int i=0; i<8; ++i) {
      vec4 trPos;
      const ivec3 msk  = v[i];
      const vec3  pos  = vec3(b[msk.x].x,b[msk.y].y,b[msk.z].z);
      trPos = matrix[objId]    *vec4(pos.xyz,1.0);
      trPos = scene.viewProject*trPos;
      gl_MeshVerticesNV[i].gl_Position = trPos;
      shOut            [i].uv          = vec2(0);
      }
    gl_PrimitiveCountNV       = 6*2;

    for(int i=0; i<36;++i)
      gl_PrimitiveIndicesNV[i] = ibo[i];
    }
#endif
  }
